{
  "address": "0x14e09c3319244a84e7c1e7b52634f5220fa96623",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childTunnel",
          "type": "address"
        },
        {
          "internalType": "contract ICheckpointManager",
          "name": "_checkpointManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EVMBridgeRoot.Message[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "name": "SentMessagesToChild",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct EVMBridgeRoot.Message[]",
          "name": "messages",
          "type": "tuple[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCheckpointManager",
          "type": "address"
        }
      ],
      "name": "setCheckpointManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChildTunnel",
          "type": "address"
        }
      ],
      "name": "setChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStateSender",
          "type": "address"
        }
      ],
      "name": "setStateSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateSender",
      "outputs": [
        {
          "internalType": "contract IStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8cab16044b1a07a06d5aa9f275bb70dc937204a6c2383cab14e2bdc3c153369b",
  "receipt": {
    "to": null,
    "from": "0x3f0556bca55bdbb78a9316936067a47fd4c4c4f4",
    "contractAddress": "0x14e09c3319244a84e7c1e7b52634f5220fa96623",
    "transactionIndex": "0x1b",
    "gasUsed": "0x26e626",
    "logsBloom": "0x
    "blockHash": "0xb86f5bbd1c7e5b51e5c0432ee4d4b80af8045f6a4249ab40fbd2174cb74fb573",
    "transactionHash": "0x8cab16044b1a07a06d5aa9f275bb70dc937204a6c2383cab14e2bdc3c153369b",
    "logs": [
      {
        "address": "0x14e09c3319244a84e7c1e7b52634f5220fa96623",
        "blockHash": "0xb86f5bbd1c7e5b51e5c0432ee4d4b80af8045f6a4249ab40fbd2174cb74fb573",
        "blockNumber": "0x497a0f",
        "data": "0x",
        "logIndex": "0x3d",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "transactionHash": "0x8cab16044b1a07a06d5aa9f275bb70dc937204a6c2383cab14e2bdc3c153369b",
        "transactionIndex": "0x1b"
      },
      {
        "address": "0x14e09c3319244a84e7c1e7b52634f5220fa96623",
        "blockHash": "0xb86f5bbd1c7e5b51e5c0432ee4d4b80af8045f6a4249ab40fbd2174cb74fb573",
        "blockNumber": "0x497a0f",
        "data": "0x",
        "logIndex": "0x3e",
        "removed": false,
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "transactionHash": "0x8cab16044b1a07a06d5aa9f275bb70dc937204a6c2383cab14e2bdc3c153369b",
        "transactionIndex": "0x1b"
      },
      {
        "address": "0x14e09c3319244a84e7c1e7b52634f5220fa96623",
        "blockHash": "0xb86f5bbd1c7e5b51e5c0432ee4d4b80af8045f6a4249ab40fbd2174cb74fb573",
        "blockNumber": "0x497a0f",
        "data": "0x",
        "logIndex": "0x3f",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "transactionHash": "0x8cab16044b1a07a06d5aa9f275bb70dc937204a6c2383cab14e2bdc3c153369b",
        "transactionIndex": "0x1b"
      }
    ],
    "blockNumber": "0x497a0f",
    "cumulativeGasUsed": "0x4c7ef3",
    "status": "0x1"
  },
  "args": [
    "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "0x2BDb05351971f27bB2eBe599289D74f2EC93a00A",
    "0x2890bA17EfE978480615e330ecB65333b880928e"
  ],
  "solcInputHash": "3a2d4677dcccddf473fbb84e19f1242f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childTunnel\",\"type\":\"address\"},{\"internalType\":\"contract ICheckpointManager\",\"name\":\"_checkpointManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EVMBridgeRoot.Message[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"SentMessagesToChild\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct EVMBridgeRoot.Message[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCheckpointManager\",\"type\":\"address\"}],\"name\":\"setCheckpointManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildTunnel\",\"type\":\"address\"}],\"name\":\"setChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStateSender\",\"type\":\"address\"}],\"name\":\"setStateSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSender\",\"outputs\":[{\"internalType\":\"contract IStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"_checkpointManager\":\"Address of the checkpoint manager\",\"_childTunnel\":\"Address of the child tunnel\",\"_owner\":\"Owner of this contract\"}},\"execute((uint8,address,uint256,bytes)[])\":{\"params\":{\"messages\":\"Array of Message's that will be encoded and sent to the child chain\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields 0 - headerNumber - Checkpoint header block number containing the reference tx 1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root 2 - blockNumber - Block number containing the reference tx on child chain 3 - blockTime - Reference tx block time 4 - txRoot - Transactions root of block 5 - receiptRoot - Receipts root of block 6 - receipt - Receipt of the reference transaction 7 - receiptProof - Merkle proof of the reference receipt 8 - branchMask - 32 bits denoting the path of receipt in merkle tree 9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"setCheckpointManager(address)\":{\"details\":\"This should be the plasma contract responsible for keeping track of checkpoints\",\"params\":{\"newCheckpointManager\":\"address of checkpoint manager contract\"}},\"setChildTunnel(address)\":{\"details\":\"This should be the contract responsible to receive data bytes on child chain\",\"params\":{\"newChildTunnel\":\"address of child tunnel contract\"}},\"setStateSender(address)\":{\"details\":\"This should be the state sender from plasma contracts It is used to send bytes from root to child chain\",\"params\":{\"newStateSender\":\"address of state sender contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain\"},\"userdoc\":{\"methods\":{\"constructor\":\"Contract constructor\",\"execute((uint8,address,uint256,bytes)[])\":{\"notice\":\"Structure of a message to be sent to the child chain\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"setCheckpointManager(address)\":{\"notice\":\"Set the checkpoint manager, callable only by admins\"},\"setChildTunnel(address)\":{\"notice\":\"Set the child chain tunnel, callable only by admins\"},\"setStateSender(address)\":{\"notice\":\"Set the state sender, callable only by admins\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/EVMBridgeRoot.sol\":\"EVMBridgeRoot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/pos-portal/contracts/common/AccessControlMixin.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\"));\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(\\n            hasRole(role, _msgSender()),\\n            _revertMsg\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x27a3479070b6d90caaf333a46690021569e6bc555e2f5a1e40fedab3b7688c28\"},\"@maticnetwork/pos-portal/contracts/lib/Merkle.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6cdbf0c857a4b4af51931a64116bac226a0d5031e37b5807da1d7b0e0bcb1ba0\"},\"@maticnetwork/pos-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"/*\\n * @title MerklePatriciaVerifier\\n * @author Sam Mayo (sammayo888@gmail.com)\\n *\\n * @dev Library for verifing merkle patricia proofs.\\n */\\npragma solidity 0.6.6;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x13ce9f50aaa647f1561687ecf9d6770cc3f4f06aa5b7640a07931beadc1b1040\"},\"@maticnetwork/pos-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\\n */\\npragma solidity 0.6.6;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x028e418ea182886c87ee80f02c9121b07202a5dcb138e71a254e8434d6eb8745\"},\"@maticnetwork/pos-portal/contracts/root/ICheckpointManager.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\",\"keccak256\":\"0x25072d6d7bb929e75338478e0995e86a46a8e64617f109d9479aab65a2f40793\"},\"@maticnetwork/pos-portal/contracts/root/StateSender/IStateSender.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\ninterface IStateSender {\\n    function syncState(address receiver, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x8f260b4eeb18f8cd86b144aa410c06f365827b99b177901c1497dff4d55c0e30\"},\"@maticnetwork/pos-portal/contracts/tunnel/BaseRootTunnel.sol\":{\"content\":\"pragma solidity ^0.6.6;\\n\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {AccessControlMixin} from \\\"../common/AccessControlMixin.sol\\\";\\nimport {IStateSender} from \\\"../root/StateSender/IStateSender.sol\\\";\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {ICheckpointManager} from \\\"../root/ICheckpointManager.sol\\\";\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\n\\nabstract contract BaseRootTunnel is AccessControlMixin {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using SafeMath for uint256;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IStateSender public stateSender;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public childTunnel;\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor() internal {\\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n      _setupContractId(\\\"RootTunnel\\\");\\n    }\\n\\n    /**\\n     * @notice Set the state sender, callable only by admins\\n     * @dev This should be the state sender from plasma contracts\\n     * It is used to send bytes from root to child chain\\n     * @param newStateSender address of state sender contract\\n     */\\n    function setStateSender(address newStateSender)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        stateSender = IStateSender(newStateSender);\\n    }\\n\\n    /**\\n     * @notice Set the checkpoint manager, callable only by admins\\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\\n     * @param newCheckpointManager address of checkpoint manager contract\\n     */\\n    function setCheckpointManager(address newCheckpointManager)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        checkpointManager = ICheckpointManager(newCheckpointManager);\\n    }\\n\\n    /**\\n     * @notice Set the child chain tunnel, callable only by admins\\n     * @dev This should be the contract responsible to receive data bytes on child chain\\n     * @param newChildTunnel address of child tunnel contract\\n     */\\n    function setChildTunnel(address newChildTunnel)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newChildTunnel != address(0x0), \\\"RootTunnel: INVALID_CHILD_TUNNEL_ADDRESS\\\");\\n        childTunnel = newChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        stateSender.syncState(childTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n            .toRlpItem()\\n            .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"RootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n            .toBytes()\\n            .toRlpItem()\\n            .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n            .toList()[\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n        \\n        // check child tunnel\\n        require(childTunnel == RLPReader.toAddress(logRLPList[0]), \\\"RootTunnel: INVALID_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"RootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"RootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber.sub(startBlock),\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"RootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x5cc27c5742ad6a6af72669977dc2763b20392cd5a1ffdc1d67d7652539061540\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"contracts/EVMBridgeRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IEVMBridge.sol\\\";\\nimport \\\"./libraries/MultiSend.sol\\\";\\n\\nimport { BaseRootTunnel } from \\\"@maticnetwork/pos-portal/contracts/tunnel/BaseRootTunnel.sol\\\";\\nimport { ICheckpointManager } from \\\"@maticnetwork/pos-portal/contracts/root/ICheckpointManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain\\n/// @notice \\ncontract  EVMBridgeRoot is Ownable, BaseRootTunnel {\\n\\n    /// @notice Emitted when a message is sent to the child chain\\n    event SentMessagesToChild(Message[] data);\\n\\n    /// @notice Structure of a message to be sent to the child chain\\n    struct Message {\\n        uint8 callType;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Contract constructor\\n    /// @param _owner Owner of this contract\\n    /// @param _childTunnel Address of the child tunnel\\n    /// @param _checkpointManager Address of the checkpoint manager\\n    constructor(address _owner, address _childTunnel, ICheckpointManager _checkpointManager) public Ownable() BaseRootTunnel() {\\n        require(_childTunnel != address(0), \\\"EVMBridgeRoot::childTunnel cannot be zero address\\\");\\n        require(address(_checkpointManager) != address(0), \\\"EVMBridgeRoot::checkpointManager cannot be zero address\\\");\\n\\n        checkpointManager = _checkpointManager;\\n        childTunnel = _childTunnel;\\n        transferOwnership(_owner);\\n    }\\n\\n    /// @notice Structure of a message to be sent to the child chain\\n    /// @param messages Array of Message's that will be encoded and sent to the child chain\\n    function execute(Message[] calldata messages) external onlyOwner returns (bool) {\\n    \\n        bytes memory encodedMessages;\\n        \\n        for(uint i =0; i < messages.length; i++){\\n            encodedMessages = abi.encodePacked(\\n                    encodedMessages,\\n                    messages[i].callType,\\n                    messages[i].to,\\n                    messages[i].value,\\n                    messages[i].data.length,\\n                    messages[i].data\\n            ); \\n        }\\n        _sendMessageToChild(encodedMessages);\\n\\n        emit SentMessagesToChild(messages);\\n        return true;\\n    }\\n\\n    /// @notice Function called as callback from child network\\n    /// @param message The message from the child chain\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        // no-op\\n    }\\n\\n}\",\"keccak256\":\"0xabe12da74fe353827f236ec2e42e7abe61bd9e7ae00697cd6ed96a1180134a42\"},\"contracts/interfaces/IEVMBridge.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\n/// @title An interface to allow smart contracts to execute across a bridge between two EVMs.\\n/// @dev A contract that implements this contract is the parent, and will control a child on the other side of the bridge.  The parent is deployed on Ethereum, and the child is deployed on the sidechain or L2.\\ninterface IEVMBridge {\\n\\n  /// @notice Called to execute calls on the child side of the bridge.\\n  /// @dev The parameter arrays must be of equal length, and together form a tuple of (to, value, data) that defines a call to a contract.\\n  /// @param to The addresses of L2 contracts to call\\n  /// @param value The values to send to each of the address (i.e. Matic on Polygon)\\n  /// @param data The calldata for the call\\n  /// @return True if the message was sent successfully\\n  function execute(address[] calldata to, uint256[] calldata value, bytes[] calldata data) external returns (bool);\\n}\",\"keccak256\":\"0x5ccee1d677c395fa14de0b14b70c9e1f8a6692c7b6d646fc0210da8445ef2b61\"},\"contracts/libraries/MultiSend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nlibrary MultiSend{\\n\\n    // credit: gnosis-safe devs\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) internal {\\n        // require(address(this) != multisendSingleton, \\\"MultiSend should only be called via delegatecall\\\"); // we commented this out to create a library\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    case 1 {\\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc9fd0a6ab3a90ffb78ec5ad440ed34abe80456d580dfa391e9c83e21ffd19c4d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f7738038062002f77833981016040819052620000349162000465565b6000620000496001600160e01b036200017516565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062002f57833981519152908290a350620000986000336001600160e01b036200017a16565b60408051808201909152600a815269149bdbdd151d5b9b995b60b21b6020820152620000cd906001600160e01b036200019316565b6001600160a01b038216620000ff5760405162461bcd60e51b8152600401620000f690620005bc565b60405180910390fd5b6001600160a01b038116620001285760405162461bcd60e51b8152600401620000f6906200055f565b600480546001600160a01b038084166001600160a01b03199283161790925560058054928516929091169190911790556200016c836001600160e01b03620001cc16565b5050506200065b565b335b90565b6200018f82826001600160e01b036200029716565b5050565b80604051602001620001a69190620004b8565b604051602081830303815290604052600290805190602001906200018f929190620003c3565b620001df6001600160e01b036200017516565b6001600160a01b0316620001fb6001600160e01b036200031b16565b6001600160a01b031614620002245760405162461bcd60e51b8152600401620000f6906200060d565b6001600160a01b0381166200024d5760405162461bcd60e51b8152600401620000f69062000519565b600080546040516001600160a01b038085169392169160008051602062002f5783398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600160209081526040909120620002be91839062000d186200032a821b17901c565b156200018f57620002d76001600160e01b036200017516565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000546001600160a01b031690565b60006200034a836001600160a01b0384166001600160e01b036200035316565b90505b92915050565b60006200036a83836001600160e01b03620003ab16565b620003a2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200034d565b5060006200034d565b60009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040657805160ff191683800117855562000436565b8280016001018555821562000436579182015b828111156200043657825182559160200191906001019062000419565b506200044492915062000448565b5090565b6200017791905b808211156200044457600081556001016200044f565b6000806000606084860312156200047a578283fd5b8351620004878162000642565b60208501519093506200049a8162000642565b6040850151909250620004ad8162000642565b809150509250925092565b60008251815b81811015620004da5760208186018101518583015201620004be565b81811115620004e95782828501525b507f3a20494e53554646494349454e545f5045524d495353494f4e53000000000000920191825250601a01919050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526037908201527f45564d427269646765526f6f743a3a636865636b706f696e744d616e6167657260408201527f2063616e6e6f74206265207a65726f2061646472657373000000000000000000606082015260800190565b60208082526031908201527f45564d427269646765526f6f743a3a6368696c6454756e6e656c2063616e6e6f60408201527074206265207a65726f206164647265737360781b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b03811681146200065857600080fd5b50565b6128ec806200066b6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca15c8731161007c578063ca15c87314610249578063cb10f94c1461025c578063d547741f14610264578063e8454e5414610277578063f2fde38b1461028a578063f953cec71461029d57610137565b806391d1485414610200578063a217fddf14610213578063bc08452b1461021b578063c0857ba01461022e578063ca02b2671461023657610137565b80636cb136b0116100ff5780636cb136b0146101b55780636d6aa34d146101c8578063715018a6146101dd5780638da5cb5b146101e55780639010d07c146101ed57610137565b80630e387de61461013c578063248a9ca31461015a5780632f2ff15d1461016d57806336568abe14610182578063607f2d4214610195575b600080fd5b6101446102b0565b604051610151919061204e565b60405180910390f35b610144610168366004611c55565b6102d4565b61018061017b366004611c6d565b6102ec565b005b610180610190366004611c6d565b61033d565b6101a86101a3366004611c55565b61037f565b6040516101519190612043565b6101806101c3366004611bc7565b610394565b6101d06103e6565b6040516101519190611efb565b6101806103f5565b6101d061047e565b6101d06101fb366004611c9c565b61048d565b6101a861020e366004611c6d565b6104b4565b6101446104d2565b610180610229366004611bc7565b6104d7565b6101d0610529565b610180610244366004611bc7565b610538565b610144610257366004611c55565b6105b0565b6101d06105c7565b610180610272366004611c6d565b6105d6565b6101a8610285366004611bea565b610610565b610180610298366004611bc7565b6107b3565b6101806102ab366004611d09565b610873565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6000818152600160205260409020600201545b919050565b60008281526001602052604090206002015461030a9061020e610889565b61032f5760405162461bcd60e51b815260040161032690612168565b60405180910390fd5b610339828261088d565b5050565b610345610889565b6001600160a01b0316816001600160a01b0316146103755760405162461bcd60e51b815260040161032690612682565b61033982826108fc565b60066020526000908152604090205460ff1681565b60006103a28161020e610889565b6002906103c25760405162461bcd60e51b81526004016103269190612057565b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6103fd610889565b6001600160a01b031661040e61047e565b6001600160a01b0316146104345760405162461bcd60e51b815260040161032690612409565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60008281526001602052604081206104ab908363ffffffff61096b16565b90505b92915050565b60008281526001602052604081206104ab908363ffffffff61097716565b600081565b60006104e58161020e610889565b6002906105055760405162461bcd60e51b81526004016103269190612057565b5050600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b60006105468161020e610889565b6002906105665760405162461bcd60e51b81526004016103269190612057565b506001600160a01b03821661058d5760405162461bcd60e51b815260040161032690612759565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602052604081206104ae9061098c565b6003546001600160a01b031681565b6000828152600160205260409020600201546105f49061020e610889565b6103755760405162461bcd60e51b8152600401610326906122e8565b600061061a610889565b6001600160a01b031661062b61047e565b6001600160a01b0316146106515760405162461bcd60e51b815260040161032690612409565b606060005b83811015610766578185858381811061066b57fe5b905060200281019061067d91906127ee565b61068b906020810190611df9565b86868481811061069757fe5b90506020028101906106a991906127ee565b6106ba906040810190602001611bc7565b8787858181106106c657fe5b90506020028101906106d891906127ee565b604001358888868181106106e857fe5b90506020028101906106fa91906127ee565b6107089060608101906127a1565b905089898781811061071657fe5b905060200281019061072891906127ee565b6107369060608101906127a1565b60405160200161074c9796959493929190611e52565b60408051601f198184030181529190529150600101610656565b5061077081610997565b7f5e9bd6be3303d55411c150b9248b9bde978c7918894a5113d49dc5048b21236284846040516107a1929190611f51565b60405180910390a15060019392505050565b6107bb610889565b6001600160a01b03166107cc61047e565b6001600160a01b0316146107f25760405162461bcd60e51b815260040161032690612409565b6001600160a01b0381166108185760405162461bcd60e51b8152600401610326906121ec565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061087e82610a02565b905061033981610d15565b3390565b60008281526001602052604090206108ab908263ffffffff610d1816565b15610339576108b8610889565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260016020526040902061091a908263ffffffff610d2d16565b1561033957610927610889565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006104ab8383610d42565b60006104ab836001600160a01b038416610d87565b60006104ae82610d9f565b6003546005546040516316f1983160e01b81526001600160a01b03928316926316f19831926109cd929116908590600401611f0f565b600060405180830381600087803b1580156109e757600080fd5b505af11580156109fb573d6000803e3d6000fd5b5050505050565b606080610a16610a1184610da3565b610de9565b90506000610a3782600281518110610a2a57fe5b6020026020010151610f16565b610a5c610a5784600881518110610a4a57fe5b6020026020010151610fd5565b61107f565b610a6c84600981518110610a2a57fe5b604051602001610a7e93929190611eb3565b60408051601f1981840301815291815281516020928301206000818152600690935291205490915060ff1615610ac65760405162461bcd60e51b8152600401610326906123c7565b6000818152600660208190526040909120805460ff191660011790558251606091610b0391610a1191610afe918791908110610a4a57fe5b610da3565b9050610b0d611ba2565b610b2a82600381518110610b1d57fe5b6020026020010151610de9565b610b3a85600981518110610a2a57fe5b81518110610b4457fe5b602002602001015190506060610b5982610de9565b9050610b7881600081518110610b6b57fe5b60200260200101516111f0565b6005546001600160a01b03908116911614610ba55760405162461bcd60e51b815260040161032690612581565b610bed610bb886600681518110610a4a57fe5b610bc887600881518110610a4a57fe5b610bd888600781518110610a4a57fe5b610be889600581518110610a2a57fe5b611242565b610c095760405162461bcd60e51b815260040161032690612509565b610c77610c1c86600281518110610a2a57fe5b610c2c87600381518110610a2a57fe5b610c3c88600481518110610a2a57fe5b60001b610c4f89600581518110610a2a57fe5b60001b610c628a600081518110610a2a57fe5b610c728b600181518110610a4a57fe5b611489565b506060610c8a82600181518110610b1d57fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610cc082600081518110610a2a57fe5b14610cdd5760405162461bcd60e51b81526004016103269061249b565b6060610cef83600281518110610a4a57fe5b9050606081806020019051810190610d079190611d84565b9a9950505050505050505050565b50565b60006104ab836001600160a01b038416611597565b60006104ab836001600160a01b0384166115e1565b81546000908210610d655760405162461bcd60e51b8152600401610326906120e1565b826000018281548110610d7457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b610dab611ba2565b6000825111610dcc5760405162461bcd60e51b815260040161032690612232565b506040805180820190915281518152602082810190820152919050565b6060610df4826116a7565b610e105760405162461bcd60e51b81526004016103269061264b565b6000610e1b836116d3565b90506060816001600160401b0381118015610e3557600080fd5b50604051908082528060200260200182016040528015610e6f57816020015b610e5c611ba2565b815260200190600190039081610e545790505b5090506000610e818560200151611740565b85519091508114610ea45760405162461bcd60e51b8152600401610326906125b6565b6000610eb386602001516117d9565b60208701510190506000805b85811015610f0a57610ed083611740565b9150604051806040016040528083815260200184815250858281518110610ef357fe5b602090810291909101015291810191600101610ebf565b50929695505050505050565b6000610f21826116a7565b15610f3e5760405162461bcd60e51b8152600401610326906121b7565b815160211015610f605760405162461bcd60e51b81526004016103269061254a565b6000610f6f8360200151611740565b83519091508114610f925760405162461bcd60e51b8152600401610326906126d1565b6000610fa184602001516117d9565b84516020808701518301805193945091849003929190831015610fcb57826020036101000a820491505b5095945050505050565b60606000610fe68360200151611740565b835190915081146110095760405162461bcd60e51b8152600401610326906122a0565b600061101884602001516117d9565b84519091508190036060816001600160401b038111801561103857600080fd5b506040519080825280601f01601f191660200182016040528015611063576020820181803683370190505b5090506000816020019050610fcb84886020015101828561183c565b604080516020810190915260008152815160609190156104ae576000806110a7600086611887565b60f81c905060018114806110be57508060ff166003145b1561114c5760018551600202036001600160401b03811180156110e057600080fd5b506040519080825280601f01601f19166020018201604052801561110b576020820181803683370190505b509250600061111b600187611887565b9050808460008151811061112b57fe5b60200101906001600160f81b031916908160001a905350600192505061119c565b60028551600202036001600160401b038111801561116957600080fd5b506040519080825280601f01601f191660200182016040528015611194576020820181803683370190505b509250600091505b60ff82165b83518110156111e7576111bc8360ff16820360020187611887565b8482815181106111c857fe5b60200101906001600160f81b031916908160001a9053506001016111a1565b50505092915050565b60006111fb826116a7565b156112185760405162461bcd60e51b815260040161032690612384565b81516015146112395760405162461bcd60e51b815260040161032690612718565b6104ae82610f16565b600061124c611ba2565b61125584610da3565b9050606061126282610de9565b9050606080856000826112748b61107f565b9050805160001415611290576000975050505050505050611481565b60005b86518110156114785781518311156112b657600098505050505050505050611481565b6112d28782815181106112c557fe5b60200260200101516118e4565b9550858051906020012084146112f357600098505050505050505050611481565b611302878281518110610b1d57fe5b94508451601114156113bf57815183141561135e578c8051906020012061132f86601081518110610a4a57fe5b80519060200120141561134d57600198505050505050505050611481565b600098505050505050505050611481565b600082848151811061136c57fe5b016020015160f81c905060108111156113915760009950505050505050505050611481565b6113b0868260ff16815181106113a357fe5b602002602001015161194a565b94505060019290920191611470565b84516002141561134d5760006113e56113de87600081518110610a4a57fe5b84866119ab565b90508251818501141561143b578d8051906020012061140a87600181518110610a4a57fe5b8051906020012014156114295760019950505050505050505050611481565b60009950505050505050505050611481565b806114525760009950505050505050505050611481565b8084019350611467866001815181106113a357fe5b94506114709050565b600101611293565b50505050505050505b949350505050565b600480546040516320a9cea560e11b81526000928392839283926001600160a01b03909216916341539d4a916114c1918a910161204e565b60a06040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190611cbd565b509350509250925061156e61152f838c611a8990919063ffffffff16565b84878d8d8d8d6040516020016115489493929190611ee0565b60405160208183030381529060405280519060200120611ab1909392919063ffffffff16565b61158a5760405162461bcd60e51b8152600401610326906124d2565b9998505050505050505050565b60006115a38383610d87565b6115d9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ae565b5060006104ae565b6000818152600183016020526040812054801561169d578354600019808301919081019060009087908390811061161457fe5b906000526020600020015490508087600001848154811061163157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061166157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506104ae565b60009150506104ae565b6020810151805160009190821a9060c08210156116c9576000925050506102e7565b5060019392505050565b6000806000905060006116e984602001516117d9565b602085015185519181019250015b808210156117375761170882611740565b820191508082111561172c5760405162461bcd60e51b815260040161032690612338565b6001909201916116f7565b50909392505050565b80516000908190811a608081101561175b57600191506117d2565b60b881101561177057607e19810191506117d2565b60c081101561179d5760b78103600185019450806020036101000a855104600182018101935050506117d2565b60f88110156117b25760be19810191506117d2565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156117f35760009150506102e7565b60b881108061180e575060c0811080159061180e575060f881105b1561181d5760019150506102e7565b60c08110156118315760b5190190506102e7565b60f5190190506102e7565b8061184657611882565b5b60208110611866578251825260209283019290910190601f1901611847565b8251825160208390036101000a60001901801990921691161782525b505050565b600060028306156118b85760108260028504815181106118a357fe5b016020015160f81c816118b257fe5b066118da565b60108260028504815181106118c957fe5b016020015160f81c816118d857fe5b045b60f81b9392505050565b60608082600001516001600160401b038111801561190157600080fd5b506040519080825280601f01601f19166020018201604052801561192c576020820181803683370190505b50905060008160200190506117d2846020015182866000015161183c565b60008061195a8360200151611740565b8351909150811461197d5760405162461bcd60e51b8152600401610326906125fd565b825160211461199e5760405162461bcd60e51b815260040161032690612123565b5050602001516001015190565b60008060606119b98661107f565b9050606081516001600160401b03811180156119d457600080fd5b506040519080825280601f01601f1916602001820160405280156119ff576020820181803683370190505b509050845b82518601811015611a59576000878281518110611a1d57fe5b602001015160f81c60f81b9050808388840381518110611a3957fe5b60200101906001600160f81b031916908160001a90535050600101611a04565b50808051906020012082805190602001201415611a795781519250611a7e565b600092505b509095945050505050565b600082821115611aab5760405162461bcd60e51b815260040161032690612269565b50900390565b60006020825181611abe57fe5b0615611adc5760405162461bcd60e51b81526004016103269061243e565b60006020835181611ae957fe5b0490508060020a8510611b0e5760405162461bcd60e51b81526004016103269061246c565b60008660205b85518111611b945785810151925060028806611b5a578183604051602001611b3d929190611e44565b604051602081830303815290604052805190602001209150611b86565b8282604051602001611b6d929190611e44565b6040516020818303038152906040528051906020012091505b600288049750602001611b14565b509094149695505050505050565b604051806040016040528060008152602001600081525090565b80356104ae81612892565b600060208284031215611bd8578081fd5b8135611be381612892565b9392505050565b60008060208385031215611bfc578081fd5b82356001600160401b0380821115611c12578283fd5b81850186601f820112611c23578384fd5b8035925081831115611c33578384fd5b8660208085028301011115611c46578384fd5b60200196919550909350505050565b600060208284031215611c66578081fd5b5035919050565b60008060408385031215611c7f578182fd5b823591506020830135611c9181612892565b809150509250929050565b60008060408385031215611cae578182fd5b50508035926020909101359150565b600080600080600060a08688031215611cd4578081fd5b855194506020860151935060408601519250606086015191506080860151611cfb81612892565b809150509295509295909350565b600060208284031215611d1a578081fd5b81356001600160401b03811115611d2f578182fd5b80830184601f820112611d40578283fd5b80359150611d55611d5083612833565b61280d565b828152856020848401011115611d69578384fd5b82602083016020830137918201602001929092529392505050565b600060208284031215611d95578081fd5b81516001600160401b03811115611daa578182fd5b80830184601f820112611dbb578283fd5b80519150611dcb611d5083612833565b828152856020848401011115611ddf578384fd5b611df0836020830160208501612862565b95945050505050565b600060208284031215611e0a578081fd5b813560ff81168114611be3578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b918252602082015260400190565b60008851611e64818460208d01612862565b80830160ff60f81b8a60f81b1681526bffffffffffffffffffffffff198960601b1660018201528760158201528660358201528486605583013790930160550190815298975050505050505050565b60008482528351611ecb816020850160208801612862565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b600060018060a01b0384168252604060208301528251806040840152611f3c816060850160208701612862565b601f01601f1916919091016060019392505050565b602080825281810183905260009060408084018583028501820187855b8881101561203557878303603f190184528135368b9003607e19018112611f93578788fd5b6080908b018035611fa3816128a7565b60ff1685528087016001600160a01b03611fbf828b8501611bbc565b16868a015235878601526060818101359036839003601e19018212611fe2578a8bfd5b828201803592506001600160401b03831115611ffc578b8cfd5b82360384131561200a578b8cfd5b848289015261201e858901848d8401611e1a565b988b01989750505093880193505050600101611f6e565b509098975050505050505050565b901515815260200190565b90815260200190565b6000602080830181845282855460018082166000811461207e576001811461209c576120d4565b60028304607f16855260ff19831660408901526060880193506120d4565b600283048086526120ac8a612856565b885b828110156120ca5781548b8201604001529084019088016120ae565b8a01604001955050505b5091979650505050505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b60208082526022908201527f526f6f7454756e6e656c3a20455849545f414c52454144595f50524f43455353604082015261115160f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601d908201527f526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245000000604082015260600190565b6020808252601a908201527f526f6f7454756e6e656c3a20494e56414c49445f484541444552000000000000604082015260600190565b60208082526021908201527f526f6f7454756e6e656c3a20494e56414c49445f524543454950545f50524f4f6040820152602360f91b606082015260800190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b6020808252818101527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c604082015260600190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b60208082526028908201527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c6040820152675f4144445245535360c01b606082015260800190565b6000808335601e198436030181126127b7578283fd5b808401803592506001600160401b038311156127d1578384fd5b602001925050368190038213156127e757600080fd5b9250929050565b60008235607e19833603018112612803578182fd5b9190910192915050565b6040518181016001600160401b038111828210171561282b57600080fd5b604052919050565b60006001600160401b03821115612848578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b8381101561287d578181015183820152602001612865565b8381111561288c576000848401525b50505050565b6001600160a01b0381168114610d1557600080fd5b60ff81168114610d1557600080fdfea2646970667358221220b1d157c27357347ed9e4ee10bfacadf1266192cba5ef51424c0efe896c90416a64736f6c634300060600338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca15c8731161007c578063ca15c87314610249578063cb10f94c1461025c578063d547741f14610264578063e8454e5414610277578063f2fde38b1461028a578063f953cec71461029d57610137565b806391d1485414610200578063a217fddf14610213578063bc08452b1461021b578063c0857ba01461022e578063ca02b2671461023657610137565b80636cb136b0116100ff5780636cb136b0146101b55780636d6aa34d146101c8578063715018a6146101dd5780638da5cb5b146101e55780639010d07c146101ed57610137565b80630e387de61461013c578063248a9ca31461015a5780632f2ff15d1461016d57806336568abe14610182578063607f2d4214610195575b600080fd5b6101446102b0565b604051610151919061204e565b60405180910390f35b610144610168366004611c55565b6102d4565b61018061017b366004611c6d565b6102ec565b005b610180610190366004611c6d565b61033d565b6101a86101a3366004611c55565b61037f565b6040516101519190612043565b6101806101c3366004611bc7565b610394565b6101d06103e6565b6040516101519190611efb565b6101806103f5565b6101d061047e565b6101d06101fb366004611c9c565b61048d565b6101a861020e366004611c6d565b6104b4565b6101446104d2565b610180610229366004611bc7565b6104d7565b6101d0610529565b610180610244366004611bc7565b610538565b610144610257366004611c55565b6105b0565b6101d06105c7565b610180610272366004611c6d565b6105d6565b6101a8610285366004611bea565b610610565b610180610298366004611bc7565b6107b3565b6101806102ab366004611d09565b610873565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6000818152600160205260409020600201545b919050565b60008281526001602052604090206002015461030a9061020e610889565b61032f5760405162461bcd60e51b815260040161032690612168565b60405180910390fd5b610339828261088d565b5050565b610345610889565b6001600160a01b0316816001600160a01b0316146103755760405162461bcd60e51b815260040161032690612682565b61033982826108fc565b60066020526000908152604090205460ff1681565b60006103a28161020e610889565b6002906103c25760405162461bcd60e51b81526004016103269190612057565b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6103fd610889565b6001600160a01b031661040e61047e565b6001600160a01b0316146104345760405162461bcd60e51b815260040161032690612409565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60008281526001602052604081206104ab908363ffffffff61096b16565b90505b92915050565b60008281526001602052604081206104ab908363ffffffff61097716565b600081565b60006104e58161020e610889565b6002906105055760405162461bcd60e51b81526004016103269190612057565b5050600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b60006105468161020e610889565b6002906105665760405162461bcd60e51b81526004016103269190612057565b506001600160a01b03821661058d5760405162461bcd60e51b815260040161032690612759565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602052604081206104ae9061098c565b6003546001600160a01b031681565b6000828152600160205260409020600201546105f49061020e610889565b6103755760405162461bcd60e51b8152600401610326906122e8565b600061061a610889565b6001600160a01b031661062b61047e565b6001600160a01b0316146106515760405162461bcd60e51b815260040161032690612409565b606060005b83811015610766578185858381811061066b57fe5b905060200281019061067d91906127ee565b61068b906020810190611df9565b86868481811061069757fe5b90506020028101906106a991906127ee565b6106ba906040810190602001611bc7565b8787858181106106c657fe5b90506020028101906106d891906127ee565b604001358888868181106106e857fe5b90506020028101906106fa91906127ee565b6107089060608101906127a1565b905089898781811061071657fe5b905060200281019061072891906127ee565b6107369060608101906127a1565b60405160200161074c9796959493929190611e52565b60408051601f198184030181529190529150600101610656565b5061077081610997565b7f5e9bd6be3303d55411c150b9248b9bde978c7918894a5113d49dc5048b21236284846040516107a1929190611f51565b60405180910390a15060019392505050565b6107bb610889565b6001600160a01b03166107cc61047e565b6001600160a01b0316146107f25760405162461bcd60e51b815260040161032690612409565b6001600160a01b0381166108185760405162461bcd60e51b8152600401610326906121ec565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061087e82610a02565b905061033981610d15565b3390565b60008281526001602052604090206108ab908263ffffffff610d1816565b15610339576108b8610889565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260016020526040902061091a908263ffffffff610d2d16565b1561033957610927610889565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006104ab8383610d42565b60006104ab836001600160a01b038416610d87565b60006104ae82610d9f565b6003546005546040516316f1983160e01b81526001600160a01b03928316926316f19831926109cd929116908590600401611f0f565b600060405180830381600087803b1580156109e757600080fd5b505af11580156109fb573d6000803e3d6000fd5b5050505050565b606080610a16610a1184610da3565b610de9565b90506000610a3782600281518110610a2a57fe5b6020026020010151610f16565b610a5c610a5784600881518110610a4a57fe5b6020026020010151610fd5565b61107f565b610a6c84600981518110610a2a57fe5b604051602001610a7e93929190611eb3565b60408051601f1981840301815291815281516020928301206000818152600690935291205490915060ff1615610ac65760405162461bcd60e51b8152600401610326906123c7565b6000818152600660208190526040909120805460ff191660011790558251606091610b0391610a1191610afe918791908110610a4a57fe5b610da3565b9050610b0d611ba2565b610b2a82600381518110610b1d57fe5b6020026020010151610de9565b610b3a85600981518110610a2a57fe5b81518110610b4457fe5b602002602001015190506060610b5982610de9565b9050610b7881600081518110610b6b57fe5b60200260200101516111f0565b6005546001600160a01b03908116911614610ba55760405162461bcd60e51b815260040161032690612581565b610bed610bb886600681518110610a4a57fe5b610bc887600881518110610a4a57fe5b610bd888600781518110610a4a57fe5b610be889600581518110610a2a57fe5b611242565b610c095760405162461bcd60e51b815260040161032690612509565b610c77610c1c86600281518110610a2a57fe5b610c2c87600381518110610a2a57fe5b610c3c88600481518110610a2a57fe5b60001b610c4f89600581518110610a2a57fe5b60001b610c628a600081518110610a2a57fe5b610c728b600181518110610a4a57fe5b611489565b506060610c8a82600181518110610b1d57fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610cc082600081518110610a2a57fe5b14610cdd5760405162461bcd60e51b81526004016103269061249b565b6060610cef83600281518110610a4a57fe5b9050606081806020019051810190610d079190611d84565b9a9950505050505050505050565b50565b60006104ab836001600160a01b038416611597565b60006104ab836001600160a01b0384166115e1565b81546000908210610d655760405162461bcd60e51b8152600401610326906120e1565b826000018281548110610d7457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b610dab611ba2565b6000825111610dcc5760405162461bcd60e51b815260040161032690612232565b506040805180820190915281518152602082810190820152919050565b6060610df4826116a7565b610e105760405162461bcd60e51b81526004016103269061264b565b6000610e1b836116d3565b90506060816001600160401b0381118015610e3557600080fd5b50604051908082528060200260200182016040528015610e6f57816020015b610e5c611ba2565b815260200190600190039081610e545790505b5090506000610e818560200151611740565b85519091508114610ea45760405162461bcd60e51b8152600401610326906125b6565b6000610eb386602001516117d9565b60208701510190506000805b85811015610f0a57610ed083611740565b9150604051806040016040528083815260200184815250858281518110610ef357fe5b602090810291909101015291810191600101610ebf565b50929695505050505050565b6000610f21826116a7565b15610f3e5760405162461bcd60e51b8152600401610326906121b7565b815160211015610f605760405162461bcd60e51b81526004016103269061254a565b6000610f6f8360200151611740565b83519091508114610f925760405162461bcd60e51b8152600401610326906126d1565b6000610fa184602001516117d9565b84516020808701518301805193945091849003929190831015610fcb57826020036101000a820491505b5095945050505050565b60606000610fe68360200151611740565b835190915081146110095760405162461bcd60e51b8152600401610326906122a0565b600061101884602001516117d9565b84519091508190036060816001600160401b038111801561103857600080fd5b506040519080825280601f01601f191660200182016040528015611063576020820181803683370190505b5090506000816020019050610fcb84886020015101828561183c565b604080516020810190915260008152815160609190156104ae576000806110a7600086611887565b60f81c905060018114806110be57508060ff166003145b1561114c5760018551600202036001600160401b03811180156110e057600080fd5b506040519080825280601f01601f19166020018201604052801561110b576020820181803683370190505b509250600061111b600187611887565b9050808460008151811061112b57fe5b60200101906001600160f81b031916908160001a905350600192505061119c565b60028551600202036001600160401b038111801561116957600080fd5b506040519080825280601f01601f191660200182016040528015611194576020820181803683370190505b509250600091505b60ff82165b83518110156111e7576111bc8360ff16820360020187611887565b8482815181106111c857fe5b60200101906001600160f81b031916908160001a9053506001016111a1565b50505092915050565b60006111fb826116a7565b156112185760405162461bcd60e51b815260040161032690612384565b81516015146112395760405162461bcd60e51b815260040161032690612718565b6104ae82610f16565b600061124c611ba2565b61125584610da3565b9050606061126282610de9565b9050606080856000826112748b61107f565b9050805160001415611290576000975050505050505050611481565b60005b86518110156114785781518311156112b657600098505050505050505050611481565b6112d28782815181106112c557fe5b60200260200101516118e4565b9550858051906020012084146112f357600098505050505050505050611481565b611302878281518110610b1d57fe5b94508451601114156113bf57815183141561135e578c8051906020012061132f86601081518110610a4a57fe5b80519060200120141561134d57600198505050505050505050611481565b600098505050505050505050611481565b600082848151811061136c57fe5b016020015160f81c905060108111156113915760009950505050505050505050611481565b6113b0868260ff16815181106113a357fe5b602002602001015161194a565b94505060019290920191611470565b84516002141561134d5760006113e56113de87600081518110610a4a57fe5b84866119ab565b90508251818501141561143b578d8051906020012061140a87600181518110610a4a57fe5b8051906020012014156114295760019950505050505050505050611481565b60009950505050505050505050611481565b806114525760009950505050505050505050611481565b8084019350611467866001815181106113a357fe5b94506114709050565b600101611293565b50505050505050505b949350505050565b600480546040516320a9cea560e11b81526000928392839283926001600160a01b03909216916341539d4a916114c1918a910161204e565b60a06040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190611cbd565b509350509250925061156e61152f838c611a8990919063ffffffff16565b84878d8d8d8d6040516020016115489493929190611ee0565b60405160208183030381529060405280519060200120611ab1909392919063ffffffff16565b61158a5760405162461bcd60e51b8152600401610326906124d2565b9998505050505050505050565b60006115a38383610d87565b6115d9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ae565b5060006104ae565b6000818152600183016020526040812054801561169d578354600019808301919081019060009087908390811061161457fe5b906000526020600020015490508087600001848154811061163157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061166157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506104ae565b60009150506104ae565b6020810151805160009190821a9060c08210156116c9576000925050506102e7565b5060019392505050565b6000806000905060006116e984602001516117d9565b602085015185519181019250015b808210156117375761170882611740565b820191508082111561172c5760405162461bcd60e51b815260040161032690612338565b6001909201916116f7565b50909392505050565b80516000908190811a608081101561175b57600191506117d2565b60b881101561177057607e19810191506117d2565b60c081101561179d5760b78103600185019450806020036101000a855104600182018101935050506117d2565b60f88110156117b25760be19810191506117d2565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156117f35760009150506102e7565b60b881108061180e575060c0811080159061180e575060f881105b1561181d5760019150506102e7565b60c08110156118315760b5190190506102e7565b60f5190190506102e7565b8061184657611882565b5b60208110611866578251825260209283019290910190601f1901611847565b8251825160208390036101000a60001901801990921691161782525b505050565b600060028306156118b85760108260028504815181106118a357fe5b016020015160f81c816118b257fe5b066118da565b60108260028504815181106118c957fe5b016020015160f81c816118d857fe5b045b60f81b9392505050565b60608082600001516001600160401b038111801561190157600080fd5b506040519080825280601f01601f19166020018201604052801561192c576020820181803683370190505b50905060008160200190506117d2846020015182866000015161183c565b60008061195a8360200151611740565b8351909150811461197d5760405162461bcd60e51b8152600401610326906125fd565b825160211461199e5760405162461bcd60e51b815260040161032690612123565b5050602001516001015190565b60008060606119b98661107f565b9050606081516001600160401b03811180156119d457600080fd5b506040519080825280601f01601f1916602001820160405280156119ff576020820181803683370190505b509050845b82518601811015611a59576000878281518110611a1d57fe5b602001015160f81c60f81b9050808388840381518110611a3957fe5b60200101906001600160f81b031916908160001a90535050600101611a04565b50808051906020012082805190602001201415611a795781519250611a7e565b600092505b509095945050505050565b600082821115611aab5760405162461bcd60e51b815260040161032690612269565b50900390565b60006020825181611abe57fe5b0615611adc5760405162461bcd60e51b81526004016103269061243e565b60006020835181611ae957fe5b0490508060020a8510611b0e5760405162461bcd60e51b81526004016103269061246c565b60008660205b85518111611b945785810151925060028806611b5a578183604051602001611b3d929190611e44565b604051602081830303815290604052805190602001209150611b86565b8282604051602001611b6d929190611e44565b6040516020818303038152906040528051906020012091505b600288049750602001611b14565b509094149695505050505050565b604051806040016040528060008152602001600081525090565b80356104ae81612892565b600060208284031215611bd8578081fd5b8135611be381612892565b9392505050565b60008060208385031215611bfc578081fd5b82356001600160401b0380821115611c12578283fd5b81850186601f820112611c23578384fd5b8035925081831115611c33578384fd5b8660208085028301011115611c46578384fd5b60200196919550909350505050565b600060208284031215611c66578081fd5b5035919050565b60008060408385031215611c7f578182fd5b823591506020830135611c9181612892565b809150509250929050565b60008060408385031215611cae578182fd5b50508035926020909101359150565b600080600080600060a08688031215611cd4578081fd5b855194506020860151935060408601519250606086015191506080860151611cfb81612892565b809150509295509295909350565b600060208284031215611d1a578081fd5b81356001600160401b03811115611d2f578182fd5b80830184601f820112611d40578283fd5b80359150611d55611d5083612833565b61280d565b828152856020848401011115611d69578384fd5b82602083016020830137918201602001929092529392505050565b600060208284031215611d95578081fd5b81516001600160401b03811115611daa578182fd5b80830184601f820112611dbb578283fd5b80519150611dcb611d5083612833565b828152856020848401011115611ddf578384fd5b611df0836020830160208501612862565b95945050505050565b600060208284031215611e0a578081fd5b813560ff81168114611be3578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b918252602082015260400190565b60008851611e64818460208d01612862565b80830160ff60f81b8a60f81b1681526bffffffffffffffffffffffff198960601b1660018201528760158201528660358201528486605583013790930160550190815298975050505050505050565b60008482528351611ecb816020850160208801612862565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b600060018060a01b0384168252604060208301528251806040840152611f3c816060850160208701612862565b601f01601f1916919091016060019392505050565b602080825281810183905260009060408084018583028501820187855b8881101561203557878303603f190184528135368b9003607e19018112611f93578788fd5b6080908b018035611fa3816128a7565b60ff1685528087016001600160a01b03611fbf828b8501611bbc565b16868a015235878601526060818101359036839003601e19018212611fe2578a8bfd5b828201803592506001600160401b03831115611ffc578b8cfd5b82360384131561200a578b8cfd5b848289015261201e858901848d8401611e1a565b988b01989750505093880193505050600101611f6e565b509098975050505050505050565b901515815260200190565b90815260200190565b6000602080830181845282855460018082166000811461207e576001811461209c576120d4565b60028304607f16855260ff19831660408901526060880193506120d4565b600283048086526120ac8a612856565b885b828110156120ca5781548b8201604001529084019088016120ae565b8a01604001955050505b5091979650505050505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b60208082526022908201527f526f6f7454756e6e656c3a20455849545f414c52454144595f50524f43455353604082015261115160f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601d908201527f526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245000000604082015260600190565b6020808252601a908201527f526f6f7454756e6e656c3a20494e56414c49445f484541444552000000000000604082015260600190565b60208082526021908201527f526f6f7454756e6e656c3a20494e56414c49445f524543454950545f50524f4f6040820152602360f91b606082015260800190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b6020808252818101527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c604082015260600190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b60208082526028908201527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c6040820152675f4144445245535360c01b606082015260800190565b6000808335601e198436030181126127b7578283fd5b808401803592506001600160401b038311156127d1578384fd5b602001925050368190038213156127e757600080fd5b9250929050565b60008235607e19833603018112612803578182fd5b9190910192915050565b6040518181016001600160401b038111828210171561282b57600080fd5b604052919050565b60006001600160401b03821115612848578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b8381101561287d578181015183820152602001612865565b8381111561288c576000848401525b50505050565b6001600160a01b0381168114610d1557600080fd5b60ff81168114610d1557600080fdfea2646970667358221220b1d157c27357347ed9e4ee10bfacadf1266192cba5ef51424c0efe896c90416a64736f6c63430006060033",
  "devdoc": {
    "methods": {
      "constructor": {
        "params": {
          "_checkpointManager": "Address of the checkpoint manager",
          "_childTunnel": "Address of the child tunnel",
          "_owner": "Owner of this contract"
        }
      },
      "execute((uint8,address,uint256,bytes)[])": {
        "params": {
          "messages": "Array of Message's that will be encoded and sent to the child chain"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields 0 - headerNumber - Checkpoint header block number containing the reference tx 1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root 2 - blockNumber - Block number containing the reference tx on child chain 3 - blockTime - Reference tx block time 4 - txRoot - Transactions root of block 5 - receiptRoot - Receipts root of block 6 - receipt - Receipt of the reference transaction 7 - receiptProof - Merkle proof of the reference receipt 8 - branchMask - 32 bits denoting the path of receipt in merkle tree 9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "setCheckpointManager(address)": {
        "details": "This should be the plasma contract responsible for keeping track of checkpoints",
        "params": {
          "newCheckpointManager": "address of checkpoint manager contract"
        }
      },
      "setChildTunnel(address)": {
        "details": "This should be the contract responsible to receive data bytes on child chain",
        "params": {
          "newChildTunnel": "address of child tunnel contract"
        }
      },
      "setStateSender(address)": {
        "details": "This should be the state sender from plasma contracts It is used to send bytes from root to child chain",
        "params": {
          "newStateSender": "address of state sender contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain"
  },
  "userdoc": {
    "methods": {
      "constructor": "Contract constructor",
      "execute((uint8,address,uint256,bytes)[])": {
        "notice": "Structure of a message to be sent to the child chain"
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "setCheckpointManager(address)": {
        "notice": "Set the checkpoint manager, callable only by admins"
      },
      "setChildTunnel(address)": {
        "notice": "Set the child chain tunnel, callable only by admins"
      },
      "setStateSender(address)": {
        "notice": "Set the state sender, callable only by admins"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2061,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1793,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1789_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "_revertMsg",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1376,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "stateSender",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStateSender)1270"
      },
      {
        "astId": 1378,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICheckpointManager)1260"
      },
      {
        "astId": 1380,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "childTunnel",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1384,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "processedExits",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)1260": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStateSender)1270": {
        "encoding": "inplace",
        "label": "contract IStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1789_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1789_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3113_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3112,
            "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2848_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1789_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1786,
            "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3113_storage"
          },
          {
            "astId": 1788,
            "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2848_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2843,
            "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2847,
            "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}