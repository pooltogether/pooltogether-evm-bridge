{
  "address": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EVMBridgeRoot.Message[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "name": "SentMessagesToChild",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct EVMBridgeRoot.Message[]",
          "name": "messages",
          "type": "tuple[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41e72d48ea9b11bc26080990690e215e74c3ab5ed92686272641e52d6360da4d",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
    "transactionIndex": 1,
    "gasUsed": "1928658",
    "logsBloom": "0x04002000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000004000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x715167f876c7146403e7548ba895d5ec03f004f9ae00e00c6baa91d7ea42783d",
    "transactionHash": "0x41e72d48ea9b11bc26080990690e215e74c3ab5ed92686272641e52d6360da4d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4821039,
        "transactionHash": "0x41e72d48ea9b11bc26080990690e215e74c3ab5ed92686272641e52d6360da4d",
        "address": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x715167f876c7146403e7548ba895d5ec03f004f9ae00e00c6baa91d7ea42783d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4821039,
        "transactionHash": "0x41e72d48ea9b11bc26080990690e215e74c3ab5ed92686272641e52d6360da4d",
        "address": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x715167f876c7146403e7548ba895d5ec03f004f9ae00e00c6baa91d7ea42783d"
      }
    ],
    "blockNumber": 4821039,
    "cumulativeGasUsed": "2047674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "c54c7ecbd6589c4a2bc5cf125be51ee9",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EVMBridgeRoot.Message[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"SentMessagesToChild\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct EVMBridgeRoot.Message[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_checkpointManager\":\"Address of the checkpoint manager\",\"_fxRoot\":\"Address of the fxRoot for the chain\",\"_owner\":\"Owner of this contract\"}},\"execute((uint8,address,uint256,bytes)[])\":{\"params\":{\"messages\":\"Array of Message's that will be encoded and sent to the child chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain\",\"version\":1},\"userdoc\":{\"events\":{\"SentMessagesToChild((uint8,address,uint256,bytes)[])\":{\"notice\":\"Emitted when a message is sent to the child chain\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Contract constructor\"},\"execute((uint8,address,uint256,bytes)[])\":{\"notice\":\"Structure of a message to be sent to the child chain\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EVMBridgeRoot.sol\":\"EVMBridgeRoot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/EVMBridgeRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/MultiSend.sol\\\";\\n\\n// import { BaseRootTunnel } from \\\"@maticnetwork/pos-portal/contracts/tunnel/BaseRootTunnel.sol\\\";\\n\\nimport { FxBaseRootTunnel } from \\\"./FxBaseRootTunnel.sol\\\";\\n\\n// import { ICheckpointManager } from \\\"@maticnetwork/pos-portal/contracts/root/ICheckpointManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain\\n/// @notice \\ncontract  EVMBridgeRoot is Ownable, FxBaseRootTunnel {\\n\\n    /// @notice Emitted when a message is sent to the child chain\\n    event SentMessagesToChild(Message[] data);\\n\\n    /// @notice Structure of a message to be sent to the child chain\\n    struct Message {\\n        uint8 callType;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Contract constructor\\n    /// @param _owner Owner of this contract\\n    /// @param _checkpointManager Address of the checkpoint manager\\n    /// @param _fxRoot Address of the fxRoot for the chain\\n    constructor(address _owner, address _checkpointManager, address _fxRoot) public \\n        Ownable() \\n        FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        \\n        transferOwnership(_owner);\\n    }\\n\\n    /// @notice Structure of a message to be sent to the child chain\\n    /// @param messages Array of Message's that will be encoded and sent to the child chain\\n    function execute(Message[] calldata messages) external onlyOwner returns (bool) {\\n    \\n        bytes memory encodedMessages;\\n        \\n        for(uint i =0; i < messages.length; i++){\\n            encodedMessages = abi.encodePacked(\\n                    encodedMessages,\\n                    messages[i].callType,\\n                    messages[i].to,\\n                    messages[i].value,\\n                    messages[i].data.length,\\n                    messages[i].data\\n            ); \\n        }\\n        _sendMessageToChild(encodedMessages);\\n\\n        emit SentMessagesToChild(messages);\\n        return true;\\n    }\\n\\n    /// @notice Function called as callback from child network\\n    /// @param message The message from the child chain\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        // no-op\\n    }\\n\\n}\",\"keccak256\":\"0x2fe310f5f6ab974f399c5f3392eddf46c605f222426cfcf56f33ad9c5847f8cb\",\"license\":\"MIT\"},\"contracts/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n\\nimport {RLPReader} from \\\"./libraries/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"./libraries/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"./libraries/Merkle.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n            .toRlpItem()\\n            .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n            .toBytes()\\n            .toRlpItem()\\n            .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n            .toList()[\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n        \\n        // check child tunnel\\n        require(fxChildTunnel == RLPReader.toAddress(logRLPList[0]), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\",\"keccak256\":\"0xaba513bc50d9144eb2e69f8a639706c54c27f3c4b68e5b23fad2656167450c96\",\"license\":\"MIT\"},\"contracts/libraries/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0xe8ac05f9b91402f58343cb2fa28041ea7187a3de5a42d3c5da227b8b61894d1b\",\"license\":\"MIT\"},\"contracts/libraries/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0x1d6bd1e6aebbe00f1f33ae20e4dd16635532d8a46c6595c71acca23d3bb1af18\",\"license\":\"MIT\"},\"contracts/libraries/MultiSend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\nlibrary MultiSend{\\n\\n    // credit: gnosis-safe devs\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) internal {\\n        // require(address(this) != multisendSingleton, \\\"MultiSend should only be called via delegatecall\\\"); // we commented this out to create a library\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    case 1 {\\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x4b6c77fe0ba35b679fc1aaddc96b885be709783327fe908d1d22da6df216d3dd\",\"license\":\"MIT\"},\"contracts/libraries/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\",\"keccak256\":\"0x8070ecdc14f587c965951b9a8f4f07120667211852f7d17744adf2623fb58e27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002312380380620023128339810160408190526200003491620001ad565b8181600062000042620000bb565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620022f2833981519152908290a350600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000b283620000bf565b50505062000271565b3390565b620000c9620000bb565b6001600160a01b0316620000dc62000181565b6001600160a01b0316146200010e5760405162461bcd60e51b815260040162000105906200023c565b60405180910390fd5b6001600160a01b038116620001375760405162461bcd60e51b81526004016200010590620001f6565b600080546040516001600160a01b0380851693921691600080516020620022f283398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b80516001600160a01b0381168114620001a857600080fd5b919050565b600080600060608486031215620001c2578283fd5b620001cd8462000190565b9250620001dd6020850162000190565b9150620001ed6040850162000190565b90509250925092565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61207180620002816000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063aea4e49e11610071578063aea4e49e14610113578063c0857ba014610126578063de9b771f1461012e578063e8454e5414610136578063f2fde38b14610149578063f953cec71461015c576100a9565b80630e387de6146100ae578063607f2d42146100cc578063715018a6146100ec5780638da5cb5b146100f6578063972c49281461010b575b600080fd5b6100b661016f565b6040516100c391906119d0565b60405180910390f35b6100df6100da366004611639565b610193565b6040516100c391906119c5565b6100f46101a8565b005b6100fe61023a565b6040516100c39190611883565b6100fe610249565b6100f46101213660046115a8565b610258565b6100fe6102a3565b6100fe6102b2565b6100df6101443660046115cb565b6102c1565b6100f46101573660046115a8565b610464565b6100f461016a36600461169d565b610524565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60046020526000908152604090205460ff1681565b6101b061053e565b6001600160a01b03166101c161023a565b6001600160a01b0316146101f05760405162461bcd60e51b81526004016101e790611c78565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6003546001600160a01b031681565b6003546001600160a01b0316156102815760405162461bcd60e51b81526004016101e790611a53565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6001546001600160a01b031681565b60006102cb61053e565b6001600160a01b03166102dc61023a565b6001600160a01b0316146103025760405162461bcd60e51b81526004016101e790611c78565b606060005b83811015610417578185858381811061031c57fe5b905060200281019061032e9190611f93565b61033c906020810190611787565b86868481811061034857fe5b905060200281019061035a9190611f93565b61036b9060408101906020016115a8565b87878581811061037757fe5b90506020028101906103899190611f93565b6040013588888681811061039957fe5b90506020028101906103ab9190611f93565b6103b9906060810190611f48565b90508989878181106103c757fe5b90506020028101906103d99190611f93565b6103e7906060810190611f48565b6040516020016103fd97969594939291906117d9565b60408051601f198184030181529190529150600101610307565b5061042181610542565b7f5e9bd6be3303d55411c150b9248b9bde978c7918894a5113d49dc5048b21236284846040516104529291906118d9565b60405180910390a15060019392505050565b61046c61053e565b6001600160a01b031661047d61023a565b6001600160a01b0316146104a35760405162461bcd60e51b81526004016101e790611c78565b6001600160a01b0381166104c95760405162461bcd60e51b81526004016101e790611a9d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061052f826105ad565b905061053a816108c1565b5050565b3390565b60015460035460405163b472047760e01b81526001600160a01b039283169263b472047792610578929116908590600401611897565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b5050505050565b6060806105c16105bc846108c4565b61090a565b905060006105e2826002815181106105d557fe5b6020026020010151610a37565b610607610602846008815181106105f557fe5b6020026020010151610af6565b610ba0565b610617846009815181106105d557fe5b6040516020016106299392919061183b565b60408051601f1981840301815291815281516020928301206000818152600490935291205490915060ff16156106715760405162461bcd60e51b81526004016101e790611b26565b6000818152600460205260409020805460ff1916600117905581516060906106ad906105bc906106a890869060069081106105f557fe5b6108c4565b90506106b761157d565b6106d4826003815181106106c757fe5b602002602001015161090a565b6106e4856009815181106105d557fe5b815181106106ee57fe5b6020026020010151905060606107038261090a565b90506107228160008151811061071557fe5b6020026020010151610d12565b6003546001600160a01b0390811691161461074f5760405162461bcd60e51b81526004016101e790611df6565b610797610762866006815181106105f557fe5b610772876008815181106105f557fe5b610782886007815181106105f557fe5b610792896005815181106105d557fe5b610d64565b6107b35760405162461bcd60e51b81526004016101e790611ae3565b6108216107c6866002815181106105d557fe5b6107d6876003815181106105d557fe5b6107e6886004815181106105d557fe5b60001b6107f9896005815181106105d557fe5b60001b61080c8a6000815181106105d557fe5b61081c8b6001815181106105f557fe5b610fab565b506060610834826001815181106106c757fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b61086a826000815181106105d557fe5b146108875760405162461bcd60e51b81526004016101e790611d41565b6060610899836002815181106105f557fe5b90506060818060200190518101906108b19190611715565b985050505050505050505b919050565b50565b6108cc61157d565b60008251116108ed5760405162461bcd60e51b81526004016101e790611b6a565b506040805180820190915281518152602082810190820152919050565b6060610915826110aa565b6109315760405162461bcd60e51b81526004016101e790611e89565b600061093c836110d6565b90506060816001600160401b038111801561095657600080fd5b5060405190808252806020026020018201604052801561099057816020015b61097d61157d565b8152602001906001900390816109755790505b50905060006109a28560200151611143565b855190915081146109c55760405162461bcd60e51b81526004016101e790611daf565b60006109d486602001516111dc565b60208701510190506000805b85811015610a2b576109f183611143565b9150604051806040016040528083815260200184815250858281518110610a1457fe5b6020908102919091010152918101916001016109e0565b50929695505050505050565b6000610a42826110aa565b15610a5f5760405162461bcd60e51b81526004016101e790611a1e565b815160211015610a815760405162461bcd60e51b81526004016101e790611d78565b6000610a908360200151611143565b83519091508114610ab35760405162461bcd60e51b81526004016101e790611ec0565b6000610ac284602001516111dc565b84516020808701518301805193945091849003929190831015610aec57826020036101000a820491505b5095945050505050565b60606000610b078360200151611143565b83519091508114610b2a5760405162461bcd60e51b81526004016101e790611ba1565b6000610b3984602001516111dc565b84519091508190036060816001600160401b0381118015610b5957600080fd5b506040519080825280601f01601f191660200182016040528015610b84576020820181803683370190505b5090506000816020019050610aec84886020015101828561123f565b60408051602081019091526000815281516060919015610d0c57600080610bc860008661128a565b60f81c90506001811480610bdf57508060ff166003145b15610c6d5760018551600202036001600160401b0381118015610c0157600080fd5b506040519080825280601f01601f191660200182016040528015610c2c576020820181803683370190505b5092506000610c3c60018761128a565b90508084600081518110610c4c57fe5b60200101906001600160f81b031916908160001a9053506001925050610cbd565b60028551600202036001600160401b0381118015610c8a57600080fd5b506040519080825280601f01601f191660200182016040528015610cb5576020820181803683370190505b509250600091505b60ff82165b8351811015610d0857610cdd8360ff1682036002018761128a565b848281518110610ce957fe5b60200101906001600160f81b031916908160001a905350600101610cc2565b5050505b92915050565b6000610d1d826110aa565b15610d3a5760405162461bcd60e51b81526004016101e790611c35565b8151601514610d5b5760405162461bcd60e51b81526004016101e790611f07565b610d0c82610a37565b6000610d6e61157d565b610d77846108c4565b90506060610d848261090a565b905060608085600082610d968b610ba0565b9050805160001415610db2576000975050505050505050610fa3565b60005b8651811015610f9a578151831115610dd857600098505050505050505050610fa3565b610df4878281518110610de757fe5b60200260200101516112e7565b955085805190602001208414610e1557600098505050505050505050610fa3565b610e248782815181106106c757fe5b9450845160111415610ee1578151831415610e80578c80519060200120610e51866010815181106105f557fe5b805190602001201415610e6f57600198505050505050505050610fa3565b600098505050505050505050610fa3565b6000828481518110610e8e57fe5b016020015160f81c90506010811115610eb35760009950505050505050505050610fa3565b610ed2868260ff1681518110610ec557fe5b602002602001015161134d565b94505060019290920191610f92565b845160021415610e6f576000610f07610f00876000815181106105f557fe5b84866113ae565b905082518185011415610f5d578d80519060200120610f2c876001815181106105f557fe5b805190602001201415610f4b5760019950505050505050505050610fa3565b60009950505050505050505050610fa3565b80610f745760009950505050505050505050610fa3565b8084019350610f8986600181518110610ec557fe5b9450610f929050565b600101610db5565b50505050505050505b949350505050565b6002546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90610fe49089906004016119d0565b60a06040518083038186803b158015610ffc57600080fd5b505afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611651565b5093505092509250611081828b0384878d8d8d8d60405160200161105b9493929190611868565b6040516020818303038152906040528051906020012061148c909392919063ffffffff16565b61109d5760405162461bcd60e51b81526004016101e790611d0a565b9998505050505050505050565b6020810151805160009190821a9060c08210156110cc576000925050506108bc565b5060019392505050565b6000806000905060006110ec84602001516111dc565b602085015185519181019250015b8082101561113a5761110b82611143565b820191508082111561112f5760405162461bcd60e51b81526004016101e790611be9565b6001909201916110fa565b50909392505050565b80516000908190811a608081101561115e57600191506111d5565b60b881101561117357607e19810191506111d5565b60c08110156111a05760b78103600185019450806020036101000a855104600182018101935050506111d5565b60f88110156111b55760be19810191506111d5565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156111f65760009150506108bc565b60b8811080611211575060c08110801590611211575060f881105b156112205760019150506108bc565b60c08110156112345760b5190190506108bc565b60f5190190506108bc565b8061124957611285565b5b60208110611269578251825260209283019290910190601f190161124a565b8251825160208390036101000a60001901801990921691161782525b505050565b600060028306156112bb5760108260028504815181106112a657fe5b016020015160f81c816112b557fe5b066112dd565b60108260028504815181106112cc57fe5b016020015160f81c816112db57fe5b045b60f81b9392505050565b60608082600001516001600160401b038111801561130457600080fd5b506040519080825280601f01601f19166020018201604052801561132f576020820181803683370190505b50905060008160200190506111d5846020015182866000015161123f565b60008061135d8360200151611143565b835190915081146113805760405162461bcd60e51b81526004016101e790611e3b565b82516021146113a15760405162461bcd60e51b81526004016101e7906119d9565b5050602001516001015190565b60008060606113bc86610ba0565b9050606081516001600160401b03811180156113d757600080fd5b506040519080825280601f01601f191660200182016040528015611402576020820181803683370190505b509050845b8251860181101561145c57600087828151811061142057fe5b602001015160f81c60f81b905080838884038151811061143c57fe5b60200101906001600160f81b031916908160001a90535050600101611407565b5080805190602001208280519060200120141561147c5781519250611481565b600092505b509095945050505050565b6000602082518161149957fe5b06156114b75760405162461bcd60e51b81526004016101e790611cad565b600060208351816114c457fe5b0490508060020a85106114e95760405162461bcd60e51b81526004016101e790611cdb565b60008660205b8551811161156f57858101519250600288066115355781836040516020016115189291906117cb565b604051602081830303815290604052805190602001209150611561565b82826040516020016115489291906117cb565b6040516020818303038152906040528051906020012091505b6002880497506020016114ef565b509094149695505050505050565b604051806040016040528060008152602001600081525090565b803560ff811681146108bc57600080fd5b6000602082840312156115b9578081fd5b81356115c481612026565b9392505050565b600080602083850312156115dd578081fd5b82356001600160401b03808211156115f3578283fd5b818501915085601f830112611606578283fd5b813581811115611614578384fd5b8660208083028501011115611627578384fd5b60209290920196919550909350505050565b60006020828403121561164a578081fd5b5035919050565b600080600080600060a08688031215611668578081fd5b85519450602086015193506040860151925060608601519150608086015161168f81612026565b809150509295509295909350565b6000602082840312156116ae578081fd5b81356001600160401b038111156116c3578182fd5b8201601f810184136116d3578182fd5b80356116e66116e182611fd5565b611fb2565b8181528560208385010111156116fa578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215611726578081fd5b81516001600160401b0381111561173b578182fd5b8201601f8101841361174b578182fd5b80516117596116e182611fd5565b81815285602083850101111561176d578384fd5b61177e826020830160208601611ff6565b95945050505050565b600060208284031215611798578081fd5b6115c482611597565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b918252602082015260400190565b600088516117eb818460208d01611ff6565b808301905060ff60f81b8960f81b1681526bffffffffffffffffffffffff198860601b16600182015286601582015285603582015283856055830137909201605501918252509695505050505050565b60008482528351611853816020850160208801611ff6565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b600060018060a01b03841682526040602083015282518060408401526118c4816060850160208701611ff6565b601f01601f1916919091016060019392505050565b602080825281810183905260009060408084018583028501820187855b888110156119b757878303603f190184528135368b9003607e1901811261191b578788fd5b8a01608060ff61192a83611597565b1685528782013561193a81612026565b6001600160a01b031685890152818701358786015260608083013536849003601e19018112611967578a8bfd5b830180356001600160401b0381111561197e578b8cfd5b80360385131561198c578b8cfd5b83838901526119a0848901828d85016117a1565b988b019897505050938801935050506001016118f6565b509098975050505050505050565b901515815260200190565b90815260200190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b6000808335601e19843603018112611f5e578283fd5b8301803591506001600160401b03821115611f77578283fd5b602001915036819003821315611f8c57600080fd5b9250929050565b60008235607e19833603018112611fa8578182fd5b9190910192915050565b6040518181016001600160401b0381118282101715611fcd57fe5b604052919050565b60006001600160401b03821115611fe857fe5b50601f01601f191660200190565b60005b83811015612011578181015183820152602001611ff9565b83811115612020576000848401525b50505050565b6001600160a01b03811681146108c157600080fdfea2646970667358221220d21fa5634e4188bf40b9f8cb0e0b997df133cc47c2875adbfdada2425a550efb64736f6c634300070300338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063aea4e49e11610071578063aea4e49e14610113578063c0857ba014610126578063de9b771f1461012e578063e8454e5414610136578063f2fde38b14610149578063f953cec71461015c576100a9565b80630e387de6146100ae578063607f2d42146100cc578063715018a6146100ec5780638da5cb5b146100f6578063972c49281461010b575b600080fd5b6100b661016f565b6040516100c391906119d0565b60405180910390f35b6100df6100da366004611639565b610193565b6040516100c391906119c5565b6100f46101a8565b005b6100fe61023a565b6040516100c39190611883565b6100fe610249565b6100f46101213660046115a8565b610258565b6100fe6102a3565b6100fe6102b2565b6100df6101443660046115cb565b6102c1565b6100f46101573660046115a8565b610464565b6100f461016a36600461169d565b610524565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60046020526000908152604090205460ff1681565b6101b061053e565b6001600160a01b03166101c161023a565b6001600160a01b0316146101f05760405162461bcd60e51b81526004016101e790611c78565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6003546001600160a01b031681565b6003546001600160a01b0316156102815760405162461bcd60e51b81526004016101e790611a53565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6001546001600160a01b031681565b60006102cb61053e565b6001600160a01b03166102dc61023a565b6001600160a01b0316146103025760405162461bcd60e51b81526004016101e790611c78565b606060005b83811015610417578185858381811061031c57fe5b905060200281019061032e9190611f93565b61033c906020810190611787565b86868481811061034857fe5b905060200281019061035a9190611f93565b61036b9060408101906020016115a8565b87878581811061037757fe5b90506020028101906103899190611f93565b6040013588888681811061039957fe5b90506020028101906103ab9190611f93565b6103b9906060810190611f48565b90508989878181106103c757fe5b90506020028101906103d99190611f93565b6103e7906060810190611f48565b6040516020016103fd97969594939291906117d9565b60408051601f198184030181529190529150600101610307565b5061042181610542565b7f5e9bd6be3303d55411c150b9248b9bde978c7918894a5113d49dc5048b21236284846040516104529291906118d9565b60405180910390a15060019392505050565b61046c61053e565b6001600160a01b031661047d61023a565b6001600160a01b0316146104a35760405162461bcd60e51b81526004016101e790611c78565b6001600160a01b0381166104c95760405162461bcd60e51b81526004016101e790611a9d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061052f826105ad565b905061053a816108c1565b5050565b3390565b60015460035460405163b472047760e01b81526001600160a01b039283169263b472047792610578929116908590600401611897565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b5050505050565b6060806105c16105bc846108c4565b61090a565b905060006105e2826002815181106105d557fe5b6020026020010151610a37565b610607610602846008815181106105f557fe5b6020026020010151610af6565b610ba0565b610617846009815181106105d557fe5b6040516020016106299392919061183b565b60408051601f1981840301815291815281516020928301206000818152600490935291205490915060ff16156106715760405162461bcd60e51b81526004016101e790611b26565b6000818152600460205260409020805460ff1916600117905581516060906106ad906105bc906106a890869060069081106105f557fe5b6108c4565b90506106b761157d565b6106d4826003815181106106c757fe5b602002602001015161090a565b6106e4856009815181106105d557fe5b815181106106ee57fe5b6020026020010151905060606107038261090a565b90506107228160008151811061071557fe5b6020026020010151610d12565b6003546001600160a01b0390811691161461074f5760405162461bcd60e51b81526004016101e790611df6565b610797610762866006815181106105f557fe5b610772876008815181106105f557fe5b610782886007815181106105f557fe5b610792896005815181106105d557fe5b610d64565b6107b35760405162461bcd60e51b81526004016101e790611ae3565b6108216107c6866002815181106105d557fe5b6107d6876003815181106105d557fe5b6107e6886004815181106105d557fe5b60001b6107f9896005815181106105d557fe5b60001b61080c8a6000815181106105d557fe5b61081c8b6001815181106105f557fe5b610fab565b506060610834826001815181106106c757fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b61086a826000815181106105d557fe5b146108875760405162461bcd60e51b81526004016101e790611d41565b6060610899836002815181106105f557fe5b90506060818060200190518101906108b19190611715565b985050505050505050505b919050565b50565b6108cc61157d565b60008251116108ed5760405162461bcd60e51b81526004016101e790611b6a565b506040805180820190915281518152602082810190820152919050565b6060610915826110aa565b6109315760405162461bcd60e51b81526004016101e790611e89565b600061093c836110d6565b90506060816001600160401b038111801561095657600080fd5b5060405190808252806020026020018201604052801561099057816020015b61097d61157d565b8152602001906001900390816109755790505b50905060006109a28560200151611143565b855190915081146109c55760405162461bcd60e51b81526004016101e790611daf565b60006109d486602001516111dc565b60208701510190506000805b85811015610a2b576109f183611143565b9150604051806040016040528083815260200184815250858281518110610a1457fe5b6020908102919091010152918101916001016109e0565b50929695505050505050565b6000610a42826110aa565b15610a5f5760405162461bcd60e51b81526004016101e790611a1e565b815160211015610a815760405162461bcd60e51b81526004016101e790611d78565b6000610a908360200151611143565b83519091508114610ab35760405162461bcd60e51b81526004016101e790611ec0565b6000610ac284602001516111dc565b84516020808701518301805193945091849003929190831015610aec57826020036101000a820491505b5095945050505050565b60606000610b078360200151611143565b83519091508114610b2a5760405162461bcd60e51b81526004016101e790611ba1565b6000610b3984602001516111dc565b84519091508190036060816001600160401b0381118015610b5957600080fd5b506040519080825280601f01601f191660200182016040528015610b84576020820181803683370190505b5090506000816020019050610aec84886020015101828561123f565b60408051602081019091526000815281516060919015610d0c57600080610bc860008661128a565b60f81c90506001811480610bdf57508060ff166003145b15610c6d5760018551600202036001600160401b0381118015610c0157600080fd5b506040519080825280601f01601f191660200182016040528015610c2c576020820181803683370190505b5092506000610c3c60018761128a565b90508084600081518110610c4c57fe5b60200101906001600160f81b031916908160001a9053506001925050610cbd565b60028551600202036001600160401b0381118015610c8a57600080fd5b506040519080825280601f01601f191660200182016040528015610cb5576020820181803683370190505b509250600091505b60ff82165b8351811015610d0857610cdd8360ff1682036002018761128a565b848281518110610ce957fe5b60200101906001600160f81b031916908160001a905350600101610cc2565b5050505b92915050565b6000610d1d826110aa565b15610d3a5760405162461bcd60e51b81526004016101e790611c35565b8151601514610d5b5760405162461bcd60e51b81526004016101e790611f07565b610d0c82610a37565b6000610d6e61157d565b610d77846108c4565b90506060610d848261090a565b905060608085600082610d968b610ba0565b9050805160001415610db2576000975050505050505050610fa3565b60005b8651811015610f9a578151831115610dd857600098505050505050505050610fa3565b610df4878281518110610de757fe5b60200260200101516112e7565b955085805190602001208414610e1557600098505050505050505050610fa3565b610e248782815181106106c757fe5b9450845160111415610ee1578151831415610e80578c80519060200120610e51866010815181106105f557fe5b805190602001201415610e6f57600198505050505050505050610fa3565b600098505050505050505050610fa3565b6000828481518110610e8e57fe5b016020015160f81c90506010811115610eb35760009950505050505050505050610fa3565b610ed2868260ff1681518110610ec557fe5b602002602001015161134d565b94505060019290920191610f92565b845160021415610e6f576000610f07610f00876000815181106105f557fe5b84866113ae565b905082518185011415610f5d578d80519060200120610f2c876001815181106105f557fe5b805190602001201415610f4b5760019950505050505050505050610fa3565b60009950505050505050505050610fa3565b80610f745760009950505050505050505050610fa3565b8084019350610f8986600181518110610ec557fe5b9450610f929050565b600101610db5565b50505050505050505b949350505050565b6002546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90610fe49089906004016119d0565b60a06040518083038186803b158015610ffc57600080fd5b505afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611651565b5093505092509250611081828b0384878d8d8d8d60405160200161105b9493929190611868565b6040516020818303038152906040528051906020012061148c909392919063ffffffff16565b61109d5760405162461bcd60e51b81526004016101e790611d0a565b9998505050505050505050565b6020810151805160009190821a9060c08210156110cc576000925050506108bc565b5060019392505050565b6000806000905060006110ec84602001516111dc565b602085015185519181019250015b8082101561113a5761110b82611143565b820191508082111561112f5760405162461bcd60e51b81526004016101e790611be9565b6001909201916110fa565b50909392505050565b80516000908190811a608081101561115e57600191506111d5565b60b881101561117357607e19810191506111d5565b60c08110156111a05760b78103600185019450806020036101000a855104600182018101935050506111d5565b60f88110156111b55760be19810191506111d5565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156111f65760009150506108bc565b60b8811080611211575060c08110801590611211575060f881105b156112205760019150506108bc565b60c08110156112345760b5190190506108bc565b60f5190190506108bc565b8061124957611285565b5b60208110611269578251825260209283019290910190601f190161124a565b8251825160208390036101000a60001901801990921691161782525b505050565b600060028306156112bb5760108260028504815181106112a657fe5b016020015160f81c816112b557fe5b066112dd565b60108260028504815181106112cc57fe5b016020015160f81c816112db57fe5b045b60f81b9392505050565b60608082600001516001600160401b038111801561130457600080fd5b506040519080825280601f01601f19166020018201604052801561132f576020820181803683370190505b50905060008160200190506111d5846020015182866000015161123f565b60008061135d8360200151611143565b835190915081146113805760405162461bcd60e51b81526004016101e790611e3b565b82516021146113a15760405162461bcd60e51b81526004016101e7906119d9565b5050602001516001015190565b60008060606113bc86610ba0565b9050606081516001600160401b03811180156113d757600080fd5b506040519080825280601f01601f191660200182016040528015611402576020820181803683370190505b509050845b8251860181101561145c57600087828151811061142057fe5b602001015160f81c60f81b905080838884038151811061143c57fe5b60200101906001600160f81b031916908160001a90535050600101611407565b5080805190602001208280519060200120141561147c5781519250611481565b600092505b509095945050505050565b6000602082518161149957fe5b06156114b75760405162461bcd60e51b81526004016101e790611cad565b600060208351816114c457fe5b0490508060020a85106114e95760405162461bcd60e51b81526004016101e790611cdb565b60008660205b8551811161156f57858101519250600288066115355781836040516020016115189291906117cb565b604051602081830303815290604052805190602001209150611561565b82826040516020016115489291906117cb565b6040516020818303038152906040528051906020012091505b6002880497506020016114ef565b509094149695505050505050565b604051806040016040528060008152602001600081525090565b803560ff811681146108bc57600080fd5b6000602082840312156115b9578081fd5b81356115c481612026565b9392505050565b600080602083850312156115dd578081fd5b82356001600160401b03808211156115f3578283fd5b818501915085601f830112611606578283fd5b813581811115611614578384fd5b8660208083028501011115611627578384fd5b60209290920196919550909350505050565b60006020828403121561164a578081fd5b5035919050565b600080600080600060a08688031215611668578081fd5b85519450602086015193506040860151925060608601519150608086015161168f81612026565b809150509295509295909350565b6000602082840312156116ae578081fd5b81356001600160401b038111156116c3578182fd5b8201601f810184136116d3578182fd5b80356116e66116e182611fd5565b611fb2565b8181528560208385010111156116fa578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215611726578081fd5b81516001600160401b0381111561173b578182fd5b8201601f8101841361174b578182fd5b80516117596116e182611fd5565b81815285602083850101111561176d578384fd5b61177e826020830160208601611ff6565b95945050505050565b600060208284031215611798578081fd5b6115c482611597565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b918252602082015260400190565b600088516117eb818460208d01611ff6565b808301905060ff60f81b8960f81b1681526bffffffffffffffffffffffff198860601b16600182015286601582015285603582015283856055830137909201605501918252509695505050505050565b60008482528351611853816020850160208801611ff6565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b600060018060a01b03841682526040602083015282518060408401526118c4816060850160208701611ff6565b601f01601f1916919091016060019392505050565b602080825281810183905260009060408084018583028501820187855b888110156119b757878303603f190184528135368b9003607e1901811261191b578788fd5b8a01608060ff61192a83611597565b1685528782013561193a81612026565b6001600160a01b031685890152818701358786015260608083013536849003601e19018112611967578a8bfd5b830180356001600160401b0381111561197e578b8cfd5b80360385131561198c578b8cfd5b83838901526119a0848901828d85016117a1565b988b019897505050938801935050506001016118f6565b509098975050505050505050565b901515815260200190565b90815260200190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b6000808335601e19843603018112611f5e578283fd5b8301803591506001600160401b03821115611f77578283fd5b602001915036819003821315611f8c57600080fd5b9250929050565b60008235607e19833603018112611fa8578182fd5b9190910192915050565b6040518181016001600160401b0381118282101715611fcd57fe5b604052919050565b60006001600160401b03821115611fe857fe5b50601f01601f191660200190565b60005b83811015612011578181015183820152602001611ff9565b83811115612020576000848401525b50505050565b6001600160a01b03811681146108c157600080fdfea2646970667358221220d21fa5634e4188bf40b9f8cb0e0b997df133cc47c2875adbfdada2425a550efb64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_checkpointManager": "Address of the checkpoint manager",
          "_fxRoot": "Address of the fxRoot for the chain",
          "_owner": "Owner of this contract"
        }
      },
      "execute((uint8,address,uint256,bytes)[])": {
        "params": {
          "messages": "Array of Message's that will be encoded and sent to the child chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "EVMBridgeRoot lives on the parent chain (e.g. eth mainnet) and sends messages to a child chain",
    "version": 1
  },
  "userdoc": {
    "events": {
      "SentMessagesToChild((uint8,address,uint256,bytes)[])": {
        "notice": "Emitted when a message is sent to the child chain"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Contract constructor"
      },
      "execute((uint8,address,uint256,bytes)[])": {
        "notice": "Structure of a message to be sent to the child chain"
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1895,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "fxRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFxStateSender)1864"
      },
      {
        "astId": 1897,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICheckpointManager)1881"
      },
      {
        "astId": 1899,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1903,
        "contract": "contracts/EVMBridgeRoot.sol:EVMBridgeRoot",
        "label": "processedExits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)1881": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)1864": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}