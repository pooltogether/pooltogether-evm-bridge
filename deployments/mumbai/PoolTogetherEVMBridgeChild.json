{
  "address": "0x3F861649a7517af171ff845a5cb7aE6ACeEbd6aA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "failure",
          "type": "bytes"
        }
      ],
      "name": "MessagesFromRootFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ReceivedMessagesFromRoot",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "transactions",
          "type": "bytes"
        }
      ],
      "name": "multiSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6c7745b50e5ee8c4629cd0cb9108cb6e824e3150e01adb4633b41868aa272d3",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x3F861649a7517af171ff845a5cb7aE6ACeEbd6aA",
    "transactionIndex": 0,
    "gasUsed": "492975",
    "logsBloom": "0x00002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000002000000000000000000000000000000000000000000000000000800000000000000000040100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000004000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x4db28a4a36a484d348c6ce12fe7e397c7ab30100cdbed38eb14f556d1b370b7e",
    "transactionHash": "0xc6c7745b50e5ee8c4629cd0cb9108cb6e824e3150e01adb4633b41868aa272d3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14647693,
        "transactionHash": "0xc6c7745b50e5ee8c4629cd0cb9108cb6e824e3150e01adb4633b41868aa272d3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000001c05bafc21600000000000000000000000000000000000000000000000000025cb93bb38ff00000000000000000000000000000000000000000000000007ffe2805736ef4aabe000000000000000000000000000000000000000000000000025af8e003cdda0000000000000000000000000000000000000000000000007ffe29c5cf1eb6c0be",
        "logIndex": 0,
        "blockHash": "0x4db28a4a36a484d348c6ce12fe7e397c7ab30100cdbed38eb14f556d1b370b7e"
      }
    ],
    "blockNumber": 14647693,
    "cumulativeGasUsed": "492975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11"
  ],
  "solcInputHash": "8f7067d61a0d7d45b22862b704eb4bd6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failure\",\"type\":\"bytes\"}],\"name\":\"MessagesFromRootFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ReceivedMessagesFromRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"params\":{\"transactions\":\"Encoded transactions to be called\"}}},\"title\":\"PoolTogetherEVMBridgeChild lives on the child chain and executes messages sent from the parent chain\",\"version\":1},\"userdoc\":{\"events\":{\"MessagesFromRootFailed(uint256,address,bytes,bytes)\":{\"notice\":\"Emitted when a messages from root fail\"},\"ReceivedMessagesFromRoot(uint256,address,bytes)\":{\"notice\":\"Emitted when a message is sent from the child chain\"}},\"kind\":\"user\",\"methods\":{\"multiSend(bytes)\":{\"notice\":\"Wrapper around MultiSend library function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolTogetherEVMBridgeChild.sol\":\"PoolTogetherEVMBridgeChild\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PoolTogetherEVMBridgeChild.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport { FxBaseChildTunnel } from \\\"./vendor/FxBaseChildTunnel.sol\\\";\\nimport { MultiSend } from \\\"./libraries/MultiSend.sol\\\";\\n\\n/// @title PoolTogetherEVMBridgeChild lives on the child chain and executes messages sent from the parent chain\\ncontract PoolTogetherEVMBridgeChild is FxBaseChildTunnel {\\n\\n    constructor(address _fxChild) public FxBaseChildTunnel(_fxChild) {\\n\\n    }\\n\\n    /// @notice Only allow the contract to call itself (pseudo-internal function)\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"PoolTogetherEVMBridgeChild:: Not authorized\\\");\\n        _;\\n    }\\n\\n    /// @notice Wrapper around MultiSend library function\\n    /// @param transactions Encoded transactions to be called\\n    function multiSend(bytes memory transactions) external onlySelf {\\n        return MultiSend.multiSend(transactions);\\n    }\\n\\n    /// @notice Emitted when a message is sent from the child chain\\n    event ReceivedMessagesFromRoot(uint256 indexed stateId, address indexed sender, bytes data);\\n\\n    /// @notice Emitted when a messages from root fail\\n    event MessagesFromRootFailed(uint256 indexed stateId, address indexed sender, bytes data, bytes failure);\\n\\n    /// @notice Receives messages from data tunnel and disperses them using MultiSend\\n    /// @param stateId State update Id\\n    /// @param sender Address of parent chain sender\\n    /// @param message Sent from parent chain\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) internal override {\\n        \\n        try this.multiSend(message) {\\n            emit ReceivedMessagesFromRoot(stateId, sender, message);\\n        }\\n        catch (bytes memory error) {\\n\\n            emit MessagesFromRootFailed(stateId, sender, message, error);        \\n        }\\n        \\n    }\\n\\n}\",\"keccak256\":\"0x03236dd67b0c75b1ab3387848a0632c1643753940a5ead74781f88a5ea0de315\",\"license\":\"MIT\"},\"contracts/libraries/MultiSend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\nlibrary MultiSend{\\n\\n    /// credit: gnosis-safe devs (https://github.com/gnosis/safe-contracts/blob/186a21a74b327f17fc41217a927dea7064f74604/contracts/libraries/MultiSend.sol)\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    case 1 {\\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x2818aee6284aabe8f2e745f333a7649c383f4a413cfc7362f19209ce5e54dd99\",\"license\":\"MIT\"},\"contracts/vendor/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) validateSender(rootMessageSender) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xccab418e9acdd95a36a605e556ad28ca77cfa2e3d414493d2ab0c9eefdfd05c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516107ec3803806107ec8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610787806100656000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063450d11f01461005c5780637f1e9cb01461008057806388837094146100885780638d80ff0a146100b05780639a7c4b7114610156575b600080fd5b6100646101db565b604080516001600160a01b039092168252519081900360200190f35b6100646101ea565b6100ae6004803603602081101561009e57600080fd5b50356001600160a01b03166101f9565b005b6100ae600480360360208110156100c657600080fd5b8101906020810181356401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610263945050505050565b6100ae6004803603606081101561016c57600080fd5b8135916001600160a01b036020820135169181019060608101604082013564010000000081111561019c57600080fd5b8201836020820111156101ae57600080fd5b803590602001918460018302840111640100000000831117156101d057600080fd5b5090925090506102ad565b6000546001600160a01b031681565b6001546001600160a01b031681565b6001546001600160a01b0316156102415760405162461bcd60e51b815260040180806020018281038252602a815260200180610728602a913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3330146102a15760405162461bcd60e51b815260040180806020018281038252602b8152602001806106fd602b913960400191505060405180910390fd5b6102aa8161038c565b50565b60015483906001600160a01b038083169116146102fb5760405162461bcd60e51b815260040180806020018281038252602b8152602001806106d2602b913960400191505060405180910390fd5b6000546001600160a01b031633146103445760405162461bcd60e51b81526004018080602001828103825260218152602001806106b16021913960400191505060405180910390fd5b610385858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061041492505050565b5050505050565b805160205b8181101561040f578083015160f81c6001820184015160601c6015830185015160358401860151605585018701600085600081146103d657600181146103e6576103f1565b6000808585888a5af191506103f1565b6000808585895af491505b50806103fc57600080fd5b5050806055018501945050505050610391565b505050565b6040516346c07f8560e11b81526020600482018181528351602484015283513093638d80ff0a9386939283926044019185019080838360005b8381101561046557818101518382015260200161044d565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156104b157600080fd5b505af19250505080156104c2575060015b610607573d8080156104f0576040519150601f19603f3d011682016040523d82523d6000602084013e6104f5565b606091505b50826001600160a01b0316847f31d2bf5b4469b3cd425f08483b1a16282ea6dd2ac739bcf73851f4821e99e31f8484604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561056557818101518382015260200161054d565b50505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156105c55781810151838201526020016105ad565b50505050905090810190601f1680156105f25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a35061040f565b816001600160a01b0316837f94c58dcc5fd388fface430009b3a29575b2b5e4b756109eeb1fc41af5a31524d836040518080602001828103825283818151815260200191508051906020019080838360005b83811015610671578181015183820152602001610659565b50505050905090810190601f16801561069e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a350505056fe4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e4445524678426173654368696c6454756e6e656c3a20494e56414c49445f53454e4445525f46524f4d5f524f4f54506f6f6c546f67657468657245564d4272696467654368696c643a3a204e6f7420617574686f72697a65644678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f414c52454144595f534554a2646970667358221220691feb404b40ae857834adf245e2be9e6c17d1257be9d883481cbbd6b778f9f164736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063450d11f01461005c5780637f1e9cb01461008057806388837094146100885780638d80ff0a146100b05780639a7c4b7114610156575b600080fd5b6100646101db565b604080516001600160a01b039092168252519081900360200190f35b6100646101ea565b6100ae6004803603602081101561009e57600080fd5b50356001600160a01b03166101f9565b005b6100ae600480360360208110156100c657600080fd5b8101906020810181356401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610263945050505050565b6100ae6004803603606081101561016c57600080fd5b8135916001600160a01b036020820135169181019060608101604082013564010000000081111561019c57600080fd5b8201836020820111156101ae57600080fd5b803590602001918460018302840111640100000000831117156101d057600080fd5b5090925090506102ad565b6000546001600160a01b031681565b6001546001600160a01b031681565b6001546001600160a01b0316156102415760405162461bcd60e51b815260040180806020018281038252602a815260200180610728602a913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3330146102a15760405162461bcd60e51b815260040180806020018281038252602b8152602001806106fd602b913960400191505060405180910390fd5b6102aa8161038c565b50565b60015483906001600160a01b038083169116146102fb5760405162461bcd60e51b815260040180806020018281038252602b8152602001806106d2602b913960400191505060405180910390fd5b6000546001600160a01b031633146103445760405162461bcd60e51b81526004018080602001828103825260218152602001806106b16021913960400191505060405180910390fd5b610385858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061041492505050565b5050505050565b805160205b8181101561040f578083015160f81c6001820184015160601c6015830185015160358401860151605585018701600085600081146103d657600181146103e6576103f1565b6000808585888a5af191506103f1565b6000808585895af491505b50806103fc57600080fd5b5050806055018501945050505050610391565b505050565b6040516346c07f8560e11b81526020600482018181528351602484015283513093638d80ff0a9386939283926044019185019080838360005b8381101561046557818101518382015260200161044d565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156104b157600080fd5b505af19250505080156104c2575060015b610607573d8080156104f0576040519150601f19603f3d011682016040523d82523d6000602084013e6104f5565b606091505b50826001600160a01b0316847f31d2bf5b4469b3cd425f08483b1a16282ea6dd2ac739bcf73851f4821e99e31f8484604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561056557818101518382015260200161054d565b50505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156105c55781810151838201526020016105ad565b50505050905090810190601f1680156105f25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a35061040f565b816001600160a01b0316837f94c58dcc5fd388fface430009b3a29575b2b5e4b756109eeb1fc41af5a31524d836040518080602001828103825283818151815260200191508051906020019080838360005b83811015610671578181015183820152602001610659565b50505050905090810190601f16801561069e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a350505056fe4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e4445524678426173654368696c6454756e6e656c3a20494e56414c49445f53454e4445525f46524f4d5f524f4f54506f6f6c546f67657468657245564d4272696467654368696c643a3a204e6f7420617574686f72697a65644678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f414c52454144595f534554a2646970667358221220691feb404b40ae857834adf245e2be9e6c17d1257be9d883481cbbd6b778f9f164736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multiSend(bytes)": {
        "params": {
          "transactions": "Encoded transactions to be called"
        }
      }
    },
    "title": "PoolTogetherEVMBridgeChild lives on the child chain and executes messages sent from the parent chain",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MessagesFromRootFailed(uint256,address,bytes,bytes)": {
        "notice": "Emitted when a messages from root fail"
      },
      "ReceivedMessagesFromRoot(uint256,address,bytes)": {
        "notice": "Emitted when a message is sent from the child chain"
      }
    },
    "kind": "user",
    "methods": {
      "multiSend(bytes)": {
        "notice": "Wrapper around MultiSend library function"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1627,
        "contract": "contracts/PoolTogetherEVMBridgeChild.sol:PoolTogetherEVMBridgeChild",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1629,
        "contract": "contracts/PoolTogetherEVMBridgeChild.sol:PoolTogetherEVMBridgeChild",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}